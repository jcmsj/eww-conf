(include "./bluetooth.yuck")

(defwindow config
  :monitor 0
  :stacking "overlay"
  :namespace "eww"
  :exclusive true
  ; :focusable true
  :geometry (
    geometry :width "14%" :height "22%"
    :y "78%"
    :x "86%"
  )
  (eventbox
    (box :orientation "v"   :class "card"
      :space-evenly false
      :halign "fill"
      :valign "end"
      :spacing 4
      (box :orientation "v" :class "config"
        :halign "start"
        :spacing 6
        (ram_usage)
        (volume_ctl)
        (light_ctl)
        ; for testing:
        ;(metric :label "X" :value sample :onchange "eww update sample={}")
      )
      (box :class "bottom-row config_menu" :halign "end"
        :space-evenly false
        :spacing 15
        (bt_indicator)
        (config_closer)
      ))))

; (defvar sample 50)
; (defvar ones 1)
; (defvar tens 10)
(defvar config_menu_is_visible 0)

(defwidget config_closer []
  (button :onclick  "eww update config_menu_is_visible=0 && eww open-many --toggle config closer"
    (label :text "")))

(defwidget config_btn []
  (button :onclick  "eww update config_menu_is_visible=1 && ./lib/open config"
    (label :text "")))

; Standlone button in the bar
(defwidget config_opener []
  (box :class "card config_menu"
    (config_btn)
  ))

(defwidget metric [label value onchange ?tooltip]
  (box :orientation "h"
    :class "metric"
    :space-evenly false
    :spacing 15
    :tooltip "${tooltip}"
    (label :text label)
    (scale :min 0
      :max 101
      :active {onchange != ""}
      :value value
    :onchange onchange)
    (label :class "percent" :limit-width 7 :text "${value}%")
  ))

(defwidget volume_ctl []
  (metric :label ""
    :value volume
    :tooltip "Volume"
  :onchange "amixer -D pipewire sset Master {}%;"))

(defwidget light_ctl []
  (metric :label "󰃟"
    :value brightness
    :tooltip "Screen brightness"
    :onchange "brightnessctl set {}%;"
  ))

(defpoll brightness
  :run-while config_menu_is_visible
  :initial 0
  :interval "300ms"
"scripts/get-brightness")

(defpoll volume
  :initial 0
  :interval "300ms"; ms
  :run-while config_menu_is_visible
"scripts/get-vol")

(defwidget ram_usage []
  (metric :label "󰍛" :tooltip "RAM Usage"
    :value {round(EWW_RAM.used_mem_perc, 1)}
  :onchange ""))
